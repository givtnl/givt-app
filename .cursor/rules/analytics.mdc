# Analytics Rules

## Event Implementation
- Include analytics events for all user interactions
- Use `AnalyticsEvent` class with `AmplitudeEvents` enum values
- Add `analyticsEvent` parameter to all interactive components
- Required for FUN components like `FunButton`
- Don't reuse events for different actions

## Event Naming
- Use only predefined event names from `AmplitudeEvents` enum
- Follow naming pattern: `componentNameActionVerb`
- Add new event types to `AmplitudeEvents` enum

## Event Parameters
- Use established key names from `AnalyticsHelper` constants
- Never log sensitive user data
- Never log personally identifiable information
- If localized data is logged, also log the technical key

## Component Analytics Integration
- Components with `analyticsEvent` parameter automatically log events when triggered
- Examples: `FunButton`, `SummaryRow`, `FunTile`, `FunModal`
- **No need to call `AnalyticsHelper.logEvent` manually** when using these components
- The component handles analytics logging internally when the `analyticsEvent` is provided
- Simply pass the `AnalyticsEvent` and the component will log it automatically

### Example Usage
```dart
// ✅ Correct - Component handles analytics automatically
SummaryRow(
  icon: FontAwesomeIcons.building,
  label: 'Organization',
  value: 'Charity Name',
  analyticsEvent: AnalyticsEvent(
    AmplitudeEvents.recurringStep4ConfirmEditOrganisation,
  ),
  onEdit: () => _cubit.navigateToOrganization(),
),

// ❌ Incorrect - Don't add manual logEvent calls
SummaryRow(
  icon: FontAwesomeIcons.building,
  label: 'Organization',
  value: 'Charity Name',
  analyticsEvent: AnalyticsEvent(
    AmplitudeEvents.recurringStep4ConfirmEditOrganisation,
  ),
  onEdit: () {
    AnalyticsHelper.logEvent( // ← Remove this - redundant!
      eventName: AmplitudeEvents.recurringStep4ConfirmEditOrganisation,
    );
    _cubit.navigateToOrganization();
  },
),
```