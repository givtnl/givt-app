name: Release Drafter

on:
  # Push for release
  push:
    branches:
      - main

  # Pull Request for auto assigning labels
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write

      # write permission is required for autolabeler
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: yq
        uses: mikefarah/yq@master
        with:
          cmd: yq -r '.version' 'pubspec.yaml'
  
      # Drafts next Release notes as Pull Requests are merged into "main"
      - name: Write Release Notes
        id: release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          version: ${{ steps.yq.outputs.result }}
          commitish: main
          publish: ${{ github.ref == 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Set current date as env variable"
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          echo "builddate=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        id: version  # this is used on variable path
        
      - uses: actions/setup-node@v3
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          node-version: 16
      - run: npm install openai

      # Summarize release notes with OpenAI
      - name: Generate AI summary
        if: ${{ github.ref == 'refs/heads/main' }}
        id: generate-text
        uses: actions/github-script@v6
        with:
          script: |
            const { OpenAI } = require('openai')
            const openai = new OpenAI({ apiKey: "${{ secrets.OPENAI_API_KEY }}"})
            const response = await openai.chat.completions.create({
              model: "gpt-4o-mini",
              messages: [
                { role: 'system', content: `You are tasked with creating concise Slack messages that distill Givt app changelogs in 1-2 sentences. These messages should effectively communicate the main updates to your colleagues. Use Slack's mrkdwn syntax—not to be confused with markdown—to highlight key points and improve readability for non-technical people. Upon receiving a changelog, promptly craft and distribute the summarized message.\n\nAdd a superhero themed punchlines, riddles or jokes at the end that is related to the changelog, give these jokes the title: 'Joke of the Day: Super Hero Edition'` },
                { role: 'user', content: `${{ steps.release-drafter.outputs.body }}` }
              ]
            })
            console.log("::set-output name=generated_text::" + response.choices[0].message.content)
      
      # Post slack message for new release
      - name: Slack Notification
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "New release of the Givt app :sparkles::tada:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ steps.yq.outputs.result }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Release Date:*\n${{ steps.version.outputs.builddate }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Made by:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.generate-text.outputs.generated_text }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View changelog :memo:",
                        "emoji": true
                      },
                      "style": "primary",
                      "url": "https://github.com/givtnl/givt-app/releases/tag/v${{ steps.yq.outputs.result }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_RELEASENOTES_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      